// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewKey extends ethereum.Event {
  get params(): NewKey__Params {
    return new NewKey__Params(this);
  }
}

export class NewKey__Params {
  _event: NewKey;

  constructor(event: NewKey) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keyIndex(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NewURI extends ethereum.Event {
  get params(): NewURI__Params {
    return new NewURI__Params(this);
  }
}

export class NewURI__Params {
  _event: NewURI;

  constructor(event: NewURI) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NewURIPrefix extends ethereum.Event {
  get params(): NewURIPrefix__Params {
    return new NewURIPrefix__Params(this);
  }
}

export class NewURIPrefix__Params {
  _event: NewURIPrefix;

  constructor(event: NewURIPrefix) {
    this._event = event;
  }

  get prefix(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RemoveReverse extends ethereum.Event {
  get params(): RemoveReverse__Params {
    return new RemoveReverse__Params(this);
  }
}

export class RemoveReverse__Params {
  _event: RemoveReverse;

  constructor(event: RemoveReverse) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ResetRecords extends ethereum.Event {
  get params(): ResetRecords__Params {
    return new ResetRecords__Params(this);
  }
}

export class ResetRecords__Params {
  _event: ResetRecords;

  constructor(event: ResetRecords) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Set extends ethereum.Event {
  get params(): Set__Params {
    return new Set__Params(this);
  }
}

export class Set__Params {
  _event: Set;

  constructor(event: Set) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keyIndex(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get valueIndex(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[3].value.toString();
  }

  get value(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class SetReverse extends ethereum.Event {
  get params(): SetReverse__Params {
    return new SetReverse__Params(this);
  }
}

export class SetReverse__Params {
  _event: SetReverse;

  constructor(event: SetReverse) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawnBatch extends ethereum.Event {
  get params(): WithdrawnBatch__Params {
    return new WithdrawnBatch__Params(this);
  }
}

export class WithdrawnBatch__Params {
  _event: WithdrawnBatch;

  constructor(event: WithdrawnBatch) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class UNSRegistry__executeInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class UNSRegistry__getByHashResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getKey(): string {
    return this.value0;
  }

  getValue(): string {
    return this.value1;
  }
}

export class UNSRegistry__getManyByHashResult {
  value0: Array<string>;
  value1: Array<string>;

  constructor(value0: Array<string>, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromStringArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }

  getKeys(): Array<string> {
    return this.value0;
  }

  getValues(): Array<string> {
    return this.value1;
  }
}

export class UNSRegistry__verifyInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class UNSRegistry extends ethereum.SmartContract {
  static bind(address: Address): UNSRegistry {
    return new UNSRegistry("UNSRegistry", address);
  }

  BATCH_LIMIT(): BigInt {
    let result = super.call("BATCH_LIMIT", "BATCH_LIMIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BATCH_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BATCH_LIMIT", "BATCH_LIMIT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  execute(req: UNSRegistry__executeInputReqStruct, signature: Bytes): Bytes {
    let result = super.call(
      "execute",
      "execute((address,uint256,uint256,bytes),bytes):(bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBytes();
  }

  try_execute(
    req: UNSRegistry__executeInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "execute",
      "execute((address,uint256,uint256,bytes),bytes):(bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exists(tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  get(key: string, tokenId: BigInt): string {
    let result = super.call("get", "get(string,uint256):(string)", [
      ethereum.Value.fromString(key),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_get(key: string, tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("get", "get(string,uint256):(string)", [
      ethereum.Value.fromString(key),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getByHash(keyHash: BigInt, tokenId: BigInt): UNSRegistry__getByHashResult {
    let result = super.call(
      "getByHash",
      "getByHash(uint256,uint256):(string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(keyHash),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new UNSRegistry__getByHashResult(
      result[0].toString(),
      result[1].toString()
    );
  }

  try_getByHash(
    keyHash: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<UNSRegistry__getByHashResult> {
    let result = super.tryCall(
      "getByHash",
      "getByHash(uint256,uint256):(string,string)",
      [
        ethereum.Value.fromUnsignedBigInt(keyHash),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UNSRegistry__getByHashResult(value[0].toString(), value[1].toString())
    );
  }

  getKey(keyHash: BigInt): string {
    let result = super.call("getKey", "getKey(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(keyHash)
    ]);

    return result[0].toString();
  }

  try_getKey(keyHash: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getKey", "getKey(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(keyHash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getKeys(hashes: Array<BigInt>): Array<string> {
    let result = super.call("getKeys", "getKeys(uint256[]):(string[])", [
      ethereum.Value.fromUnsignedBigIntArray(hashes)
    ]);

    return result[0].toStringArray();
  }

  try_getKeys(hashes: Array<BigInt>): ethereum.CallResult<Array<string>> {
    let result = super.tryCall("getKeys", "getKeys(uint256[]):(string[])", [
      ethereum.Value.fromUnsignedBigIntArray(hashes)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getMany(keys: Array<string>, tokenId: BigInt): Array<string> {
    let result = super.call("getMany", "getMany(string[],uint256):(string[])", [
      ethereum.Value.fromStringArray(keys),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toStringArray();
  }

  try_getMany(
    keys: Array<string>,
    tokenId: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getMany",
      "getMany(string[],uint256):(string[])",
      [
        ethereum.Value.fromStringArray(keys),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getManyByHash(
    keyHashes: Array<BigInt>,
    tokenId: BigInt
  ): UNSRegistry__getManyByHashResult {
    let result = super.call(
      "getManyByHash",
      "getManyByHash(uint256[],uint256):(string[],string[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(keyHashes),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new UNSRegistry__getManyByHashResult(
      result[0].toStringArray(),
      result[1].toStringArray()
    );
  }

  try_getManyByHash(
    keyHashes: Array<BigInt>,
    tokenId: BigInt
  ): ethereum.CallResult<UNSRegistry__getManyByHashResult> {
    let result = super.tryCall(
      "getManyByHash",
      "getManyByHash(uint256[],uint256):(string[],string[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(keyHashes),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UNSRegistry__getManyByHashResult(
        value[0].toStringArray(),
        value[1].toStringArray()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(spender: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    spender: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  namehash(labels: Array<string>): BigInt {
    let result = super.call("namehash", "namehash(string[]):(uint256)", [
      ethereum.Value.fromStringArray(labels)
    ]);

    return result[0].toBigInt();
  }

  try_namehash(labels: Array<string>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("namehash", "namehash(string[]):(uint256)", [
      ethereum.Value.fromStringArray(labels)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceOf(tokenId: BigInt): BigInt {
    let result = super.call("nonceOf", "nonceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_nonceOf(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonceOf", "nonceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverOf(tokenId: BigInt): Address {
    let result = super.call("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_resolverOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reverseOf(addr: Address): BigInt {
    let result = super.call("reverseOf", "reverseOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBigInt();
  }

  try_reverseOf(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reverseOf", "reverseOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  root(): BigInt {
    let result = super.call("root", "root():(uint256)", []);

    return result[0].toBigInt();
  }

  try_root(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("root", "root():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verify(req: UNSRegistry__verifyInputReqStruct, signature: Bytes): boolean {
    let result = super.call(
      "verify",
      "verify((address,uint256,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBoolean();
  }

  try_verify(
    req: UNSRegistry__verifyInputReqStruct,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify((address,uint256,uint256,bytes),bytes):(bool)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddKeyCall extends ethereum.Call {
  get inputs(): AddKeyCall__Inputs {
    return new AddKeyCall__Inputs(this);
  }

  get outputs(): AddKeyCall__Outputs {
    return new AddKeyCall__Outputs(this);
  }
}

export class AddKeyCall__Inputs {
  _call: AddKeyCall;

  constructor(call: AddKeyCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddKeyCall__Outputs {
  _call: AddKeyCall;

  constructor(call: AddKeyCall) {
    this._call = call;
  }
}

export class AddProxyReaderCall extends ethereum.Call {
  get inputs(): AddProxyReaderCall__Inputs {
    return new AddProxyReaderCall__Inputs(this);
  }

  get outputs(): AddProxyReaderCall__Outputs {
    return new AddProxyReaderCall__Outputs(this);
  }
}

export class AddProxyReaderCall__Inputs {
  _call: AddProxyReaderCall;

  constructor(call: AddProxyReaderCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddProxyReaderCall__Outputs {
  _call: AddProxyReaderCall;

  constructor(call: AddProxyReaderCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnTLDL1Call extends ethereum.Call {
  get inputs(): BurnTLDL1Call__Inputs {
    return new BurnTLDL1Call__Inputs(this);
  }

  get outputs(): BurnTLDL1Call__Outputs {
    return new BurnTLDL1Call__Outputs(this);
  }
}

export class BurnTLDL1Call__Inputs {
  _call: BurnTLDL1Call;

  constructor(call: BurnTLDL1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnTLDL1Call__Outputs {
  _call: BurnTLDL1Call;

  constructor(call: BurnTLDL1Call) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositToPolygonCall extends ethereum.Call {
  get inputs(): DepositToPolygonCall__Inputs {
    return new DepositToPolygonCall__Inputs(this);
  }

  get outputs(): DepositToPolygonCall__Outputs {
    return new DepositToPolygonCall__Outputs(this);
  }
}

export class DepositToPolygonCall__Inputs {
  _call: DepositToPolygonCall;

  constructor(call: DepositToPolygonCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositToPolygonCall__Outputs {
  _call: DepositToPolygonCall;

  constructor(call: DepositToPolygonCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get req(): ExecuteCallReqStruct {
    return changetype<ExecuteCallReqStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get mintingManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }
}

export class MintTLDCall extends ethereum.Call {
  get inputs(): MintTLDCall__Inputs {
    return new MintTLDCall__Inputs(this);
  }

  get outputs(): MintTLDCall__Outputs {
    return new MintTLDCall__Outputs(this);
  }
}

export class MintTLDCall__Inputs {
  _call: MintTLDCall;

  constructor(call: MintTLDCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintTLDCall__Outputs {
  _call: MintTLDCall;

  constructor(call: MintTLDCall) {
    this._call = call;
  }
}

export class MintWithRecordsCall extends ethereum.Call {
  get inputs(): MintWithRecordsCall__Inputs {
    return new MintWithRecordsCall__Inputs(this);
  }

  get outputs(): MintWithRecordsCall__Outputs {
    return new MintWithRecordsCall__Outputs(this);
  }
}

export class MintWithRecordsCall__Inputs {
  _call: MintWithRecordsCall;

  constructor(call: MintWithRecordsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get labels(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get keys(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }
}

export class MintWithRecordsCall__Outputs {
  _call: MintWithRecordsCall;

  constructor(call: MintWithRecordsCall) {
    this._call = call;
  }
}

export class MoveTLDOwnershipL2Call extends ethereum.Call {
  get inputs(): MoveTLDOwnershipL2Call__Inputs {
    return new MoveTLDOwnershipL2Call__Inputs(this);
  }

  get outputs(): MoveTLDOwnershipL2Call__Outputs {
    return new MoveTLDOwnershipL2Call__Outputs(this);
  }
}

export class MoveTLDOwnershipL2Call__Inputs {
  _call: MoveTLDOwnershipL2Call;

  constructor(call: MoveTLDOwnershipL2Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MoveTLDOwnershipL2Call__Outputs {
  _call: MoveTLDOwnershipL2Call;

  constructor(call: MoveTLDOwnershipL2Call) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReconfigureCall extends ethereum.Call {
  get inputs(): ReconfigureCall__Inputs {
    return new ReconfigureCall__Inputs(this);
  }

  get outputs(): ReconfigureCall__Outputs {
    return new ReconfigureCall__Outputs(this);
  }
}

export class ReconfigureCall__Inputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReconfigureCall__Outputs {
  _call: ReconfigureCall;

  constructor(call: ReconfigureCall) {
    this._call = call;
  }
}

export class RemoveReverseCall extends ethereum.Call {
  get inputs(): RemoveReverseCall__Inputs {
    return new RemoveReverseCall__Inputs(this);
  }

  get outputs(): RemoveReverseCall__Outputs {
    return new RemoveReverseCall__Outputs(this);
  }
}

export class RemoveReverseCall__Inputs {
  _call: RemoveReverseCall;

  constructor(call: RemoveReverseCall) {
    this._call = call;
  }
}

export class RemoveReverseCall__Outputs {
  _call: RemoveReverseCall;

  constructor(call: RemoveReverseCall) {
    this._call = call;
  }
}

export class ResetCall extends ethereum.Call {
  get inputs(): ResetCall__Inputs {
    return new ResetCall__Inputs(this);
  }

  get outputs(): ResetCall__Outputs {
    return new ResetCall__Outputs(this);
  }
}

export class ResetCall__Inputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCall__Outputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetByHashCall extends ethereum.Call {
  get inputs(): SetByHashCall__Inputs {
    return new SetByHashCall__Inputs(this);
  }

  get outputs(): SetByHashCall__Outputs {
    return new SetByHashCall__Outputs(this);
  }
}

export class SetByHashCall__Inputs {
  _call: SetByHashCall;

  constructor(call: SetByHashCall) {
    this._call = call;
  }

  get keyHash(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetByHashCall__Outputs {
  _call: SetByHashCall;

  constructor(call: SetByHashCall) {
    this._call = call;
  }
}

export class SetCNSRegistryCall extends ethereum.Call {
  get inputs(): SetCNSRegistryCall__Inputs {
    return new SetCNSRegistryCall__Inputs(this);
  }

  get outputs(): SetCNSRegistryCall__Outputs {
    return new SetCNSRegistryCall__Outputs(this);
  }
}

export class SetCNSRegistryCall__Inputs {
  _call: SetCNSRegistryCall;

  constructor(call: SetCNSRegistryCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCNSRegistryCall__Outputs {
  _call: SetCNSRegistryCall;

  constructor(call: SetCNSRegistryCall) {
    this._call = call;
  }
}

export class SetChildChainManagerCall extends ethereum.Call {
  get inputs(): SetChildChainManagerCall__Inputs {
    return new SetChildChainManagerCall__Inputs(this);
  }

  get outputs(): SetChildChainManagerCall__Outputs {
    return new SetChildChainManagerCall__Outputs(this);
  }
}

export class SetChildChainManagerCall__Inputs {
  _call: SetChildChainManagerCall;

  constructor(call: SetChildChainManagerCall) {
    this._call = call;
  }

  get clientChainManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetChildChainManagerCall__Outputs {
  _call: SetChildChainManagerCall;

  constructor(call: SetChildChainManagerCall) {
    this._call = call;
  }
}

export class SetManyCall extends ethereum.Call {
  get inputs(): SetManyCall__Inputs {
    return new SetManyCall__Inputs(this);
  }

  get outputs(): SetManyCall__Outputs {
    return new SetManyCall__Outputs(this);
  }
}

export class SetManyCall__Inputs {
  _call: SetManyCall;

  constructor(call: SetManyCall) {
    this._call = call;
  }

  get keys(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetManyCall__Outputs {
  _call: SetManyCall;

  constructor(call: SetManyCall) {
    this._call = call;
  }
}

export class SetManyByHashCall extends ethereum.Call {
  get inputs(): SetManyByHashCall__Inputs {
    return new SetManyByHashCall__Inputs(this);
  }

  get outputs(): SetManyByHashCall__Outputs {
    return new SetManyByHashCall__Outputs(this);
  }
}

export class SetManyByHashCall__Inputs {
  _call: SetManyByHashCall;

  constructor(call: SetManyByHashCall) {
    this._call = call;
  }

  get keyHashes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetManyByHashCall__Outputs {
  _call: SetManyByHashCall;

  constructor(call: SetManyByHashCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetReverseCall extends ethereum.Call {
  get inputs(): SetReverseCall__Inputs {
    return new SetReverseCall__Inputs(this);
  }

  get outputs(): SetReverseCall__Outputs {
    return new SetReverseCall__Outputs(this);
  }
}

export class SetReverseCall__Inputs {
  _call: SetReverseCall;

  constructor(call: SetReverseCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReverseCall__Outputs {
  _call: SetReverseCall;

  constructor(call: SetReverseCall) {
    this._call = call;
  }
}

export class SetRootChainManagerCall extends ethereum.Call {
  get inputs(): SetRootChainManagerCall__Inputs {
    return new SetRootChainManagerCall__Inputs(this);
  }

  get outputs(): SetRootChainManagerCall__Outputs {
    return new SetRootChainManagerCall__Outputs(this);
  }
}

export class SetRootChainManagerCall__Inputs {
  _call: SetRootChainManagerCall;

  constructor(call: SetRootChainManagerCall) {
    this._call = call;
  }

  get rootChainManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRootChainManagerCall__Outputs {
  _call: SetRootChainManagerCall;

  constructor(call: SetRootChainManagerCall) {
    this._call = call;
  }
}

export class SetTokenURIPrefixCall extends ethereum.Call {
  get inputs(): SetTokenURIPrefixCall__Inputs {
    return new SetTokenURIPrefixCall__Inputs(this);
  }

  get outputs(): SetTokenURIPrefixCall__Outputs {
    return new SetTokenURIPrefixCall__Outputs(this);
  }
}

export class SetTokenURIPrefixCall__Inputs {
  _call: SetTokenURIPrefixCall;

  constructor(call: SetTokenURIPrefixCall) {
    this._call = call;
  }

  get prefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetTokenURIPrefixCall__Outputs {
  _call: SetTokenURIPrefixCall;

  constructor(call: SetTokenURIPrefixCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnlockWithRecordsCall extends ethereum.Call {
  get inputs(): UnlockWithRecordsCall__Inputs {
    return new UnlockWithRecordsCall__Inputs(this);
  }

  get outputs(): UnlockWithRecordsCall__Outputs {
    return new UnlockWithRecordsCall__Outputs(this);
  }
}

export class UnlockWithRecordsCall__Inputs {
  _call: UnlockWithRecordsCall;

  constructor(call: UnlockWithRecordsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get keys(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }
}

export class UnlockWithRecordsCall__Outputs {
  _call: UnlockWithRecordsCall;

  constructor(call: UnlockWithRecordsCall) {
    this._call = call;
  }
}

export class UpgradeAllCall extends ethereum.Call {
  get inputs(): UpgradeAllCall__Inputs {
    return new UpgradeAllCall__Inputs(this);
  }

  get outputs(): UpgradeAllCall__Outputs {
    return new UpgradeAllCall__Outputs(this);
  }
}

export class UpgradeAllCall__Inputs {
  _call: UpgradeAllCall;

  constructor(call: UpgradeAllCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpgradeAllCall__Outputs {
  _call: UpgradeAllCall;

  constructor(call: UpgradeAllCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawBatchCall extends ethereum.Call {
  get inputs(): WithdrawBatchCall__Inputs {
    return new WithdrawBatchCall__Inputs(this);
  }

  get outputs(): WithdrawBatchCall__Outputs {
    return new WithdrawBatchCall__Outputs(this);
  }
}

export class WithdrawBatchCall__Inputs {
  _call: WithdrawBatchCall;

  constructor(call: WithdrawBatchCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class WithdrawBatchCall__Outputs {
  _call: WithdrawBatchCall;

  constructor(call: WithdrawBatchCall) {
    this._call = call;
  }
}

export class WithdrawFromPolygonCall extends ethereum.Call {
  get inputs(): WithdrawFromPolygonCall__Inputs {
    return new WithdrawFromPolygonCall__Inputs(this);
  }

  get outputs(): WithdrawFromPolygonCall__Outputs {
    return new WithdrawFromPolygonCall__Outputs(this);
  }
}

export class WithdrawFromPolygonCall__Inputs {
  _call: WithdrawFromPolygonCall;

  constructor(call: WithdrawFromPolygonCall) {
    this._call = call;
  }

  get inputData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get keys(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get values(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }
}

export class WithdrawFromPolygonCall__Outputs {
  _call: WithdrawFromPolygonCall;

  constructor(call: WithdrawFromPolygonCall) {
    this._call = call;
  }
}

export class WithdrawWithMetadataCall extends ethereum.Call {
  get inputs(): WithdrawWithMetadataCall__Inputs {
    return new WithdrawWithMetadataCall__Inputs(this);
  }

  get outputs(): WithdrawWithMetadataCall__Outputs {
    return new WithdrawWithMetadataCall__Outputs(this);
  }
}

export class WithdrawWithMetadataCall__Inputs {
  _call: WithdrawWithMetadataCall;

  constructor(call: WithdrawWithMetadataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawWithMetadataCall__Outputs {
  _call: WithdrawWithMetadataCall;

  constructor(call: WithdrawWithMetadataCall) {
    this._call = call;
  }
}
